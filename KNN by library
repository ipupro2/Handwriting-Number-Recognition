import os
import numpy as np
import gzip
import Vectorize as v
import time
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

def load_mnist(path, kind='train'):
    """Load MNIST data from `path`"""
    labels_path = os.path.join(path, '%s-labels-idx1-ubyte.gz' % kind)
    images_path = os.path.join(path, '%s-images-idx3-ubyte.gz' % kind)
        
    with gzip.open(labels_path, 'rb') as lbpath:
        lbpath.read(8)
        buffer = lbpath.read()
        labels = np.frombuffer(buffer, dtype=np.uint8)
    with gzip.open(images_path, 'rb') as imgpath:
        imgpath.read(16)
        buffer = imgpath.read()
        images = np.frombuffer(buffer, dtype=np.uint8).reshape(len(labels), 28, 28).astype(np.float64)
    return images, labels


"""ham phan lop KNN bang thu vien"""
def KNNbyLib(X_train, y_train, X_test):
    X_train = v.MeanVectorize14(X_train)
    X_test = v.MeanVectorize14(X_test)
    X_train = v.NormalVectorize(X_train)
    X_test = v.NormalVectorize(X_test)
    clf = KNeighborsClassifier(n_neighbors = 3, weights = 'distance', algorithm = 'brute', p = 2)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    return y_pred


X_train, y_train = load_mnist('data/', kind='train')
X_test, y_test = load_mnist('data/', kind='t10k')
print('Rows: %d, columns: %d' % (X_train.shape[0], X_train.shape[1]))
print('Rows: %d, columns: %d' %(X_test.shape[0], X_test.shape[1]))


start_time = time.time()
y_pred=KNNbyLib(X_train,y_train,X_test)
end_time = time.time()


print("20 nhan dau tien cua tap du doan")
print(y_pred[0:19])
print("20 nhan dau tien cua tap X_test")
print(y_test[0:19])
print ("Accuracy of 1NN for MNIST: %.2f %%" %(100*accuracy_score(y_test, y_pred)))
print ("Running time: %.2f (s)" % (end_time - start_time))
